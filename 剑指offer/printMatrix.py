# -*- coding:utf-8 -*-
'''
输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，
例如，如果输入如下4 X 4矩阵：
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
则依次打印出数字
    1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.
'''

class Solution:
    # matrix类型为二维列表，需要返回列表
    def printMatrix(self, matrix):
        res = []
        # 类似于旋转魔方，每次先输出matrix第一行并删除
        # 然后，逆时针旋转余下的魔方90度
        # 继续输出魔方第一行
        # 重复操作
        # 直到魔方为空
        while matrix:
            # 输出魔方第一行
            res += matrix[0]
            # 删除魔方第一行
            # list的del方法可以删除一个slice或者整个list
            # 区别于pop方法只删除一个元素
            del matrix[0]
            # *matrix类似于解压原矩阵，即去掉最外层的list
            # zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。
            # 如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。
            # 总的效果相当于将矩阵逆时针旋转90度
            matrix = zip(*matrix)[::-1]
        return res